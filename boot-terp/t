; Tests for lump

' ()
= ()

' \a
= \a

'  \a
= \a

' )(
! 1:3: rotten lexical syntax

' (())
= (())

' (() ())
= (() ())

' ( \x (((  ))) \z)
= (\x ((())) \z)

' ""
= ()

' "a"
= "a"

' "Hello, world!"
= "Hello, world!"

' ("Lists")
= ("Lists")

' ("Lists" ("and"  "lists"))
= ("Lists" ("and" "lists"))

' x
= x

' (ok-fancier-symbols?  (etc))
= (ok-fancier-symbols? (etc))

' (x "x")
= (x "x")

' (multi
   line
   input)
= (multi line input)

' ('x)
= ((quote x))

- \a
= \a

- '()
= ()

- (goober)
! 1:9: Unknown procedure

- (cond)
! 1:7: No matching cond clause

- (cond ('t 'yes))
= yes

- (cond ('f 'yes) ('foo 'no))
= no

- (cond ((cond ('f 'one) ('f 'two) ('t 'three))
         'hurray)
         ('t 'booo))
= hurray

- (cond ((cond ('f 'one) ('f 'two) ('t 'f))
         'hurray)
         ('t 'booo))
= booo

- (null? '())
= t

- (null? \a)
= f

- (char? '())
= f

- (char? \a)
= t

- (pair? \a)
= f

- (pair? '"hello")
= t

- (eq? 'x 'x)
= t

- (eq? 'x 'y)
= f

- (eq? (pair? '()) 'f)
= t

- (cons 'x '())
= (x)

- (car '"ab")
= \a

- (cdr '"ab")
= "b"

- (car (cons 'a '(b c)))
= a

- (car (error '"yo dude"))
! 1:25: "yo dude"

; XXX we should change this to get both results...
- 'hello 'world
= hello~world

- (define (list x) (cons x '()))
  (list 'foo)
= (foo)

- (define (append x y)
    (cond ((null? x) y)
          ('t (cons (car x) (append (cdr x) y)))))
  (append '(a b c) '(x y z))
= (a b c x y z)

- (define a '"Hello.")
  a
= "Hello."

- (define a '"yum")
  (set-car! a \b)
  a
= f~"bum"

- (read-char)z
= \z

- (define a (peek-char))(cons a '())
= "("

- eof-object
= ("*eof*")

; XXX our test driver can't supply this test because
; it currently gives no way to give input without the newline.
;- (read-char)
;= ("*eof*")
; So, here's a more complicated pair of tests of eof-ness:

- (define (f) (g (read-char)))
  (define (g c) (read-char))
  (f)
= f

- (define (f) (g (read-char)))
  (define (g c) (peek-char))
  (f)
= f

- (write-char \X)
= Xf

- (cond ('t (write-char \a) (write-char \b)))
= abf

- (define (f) (write-char \a) (write-char \b))
  (f)
= abf

- (define (string? x)
    (cond ((null? x) 't)
          ((char? x) 'f)
          ((char? (car x)) (string? (cdr x)))
          ('t 'f)))
  (string? '())
  (string? '"hell")
  (string? '(\h \e "ll"))
= t~t~f



; Symbols
; N.B. generally for speed symbol? should first check stringness

- (define (string=? s t)
    (cond ((null? s) (null? t))
          ((eq? (car s) (car t)) (string=? (cdr s) (cdr t)))
          ('t 'f)))

  (define (memq? x xs)
    (cond ((null? xs) 'f)
          ((eq? x (car xs)) 't)
          ('t (memq? x (cdr xs)))))

  (define (cons! x xs-cell)
    (set-car! xs-cell (cons x (car xs-cell))))

  (define symbols '((f)))

  (define (symbol? x)
    (memq? x (car symbols)))

  (define (intern s) 
    (intern-lookup s (car symbols)))

  (define (intern-lookup s syms)
    (cond ((null? syms) (cons! s symbols) s)
          ((string=? s (car syms)) (car syms))
          ('t (intern-lookup s (cdr syms)))))

  (symbol? (intern '"x"))
  (intern '"ab")
  (eq? (intern '"x") (intern '"x"))
  (symbol? 'f)
  (symbol? '"f")

= t~"ab"~t~t~f


; Writing 

- (define (string? x)
    (cond ((null? x) 't)
          ((char? x) 'f)
          ((char? (car x)) (string? (cdr x)))
          ('t 'f)))

  (define (string=? s t)
    (cond ((null? s) (null? t))
          ((eq? (car s) (car t)) (string=? (cdr s) (cdr t)))
          ('t 'f)))

  (define (memq? x xs)
    (cond ((null? xs) 'f)
          ((eq? x (car xs)) 't)
          ('t (memq? x (cdr xs)))))

  (define (cons! x xs-cell)
    (set-car! xs-cell (cons x (car xs-cell))))

  (define symbols '((f)))

  (define (symbol? x)
    (memq? x (car symbols)))

  (define (intern s) 
    (intern-lookup s (car symbols)))

  (define (intern-lookup s syms)
    (cond ((null? syms) (cons! s symbols) s)
          ((string=? s (car syms)) (car syms))
          ('t (intern-lookup s (cdr syms)))))

  (define (write x)
    (cond ((null? x) (write-string '"()"))
          ((char? x) (write-char \\) (write-char x))
          ((string? x)
           (cond ((symbol? x) (write-string x))
                 ('t (write-char \") (write-string x) (write-char \"))))
          ('t (write-char \()
              (write (car x))
              (write-each (cdr x))
              (write-char \)))))

  (define (write-each xs)
    (cond ((null? xs))
          ('t (write-char \ )
              (write (car xs))
              (write-each (cdr xs)))))

  (define (write-string chars)
    (cond ((null? chars))
          ('t (write-char (car chars))
              (write-string (cdr chars)))))

  (write '())
  (write '"abc")
  (write '(\a (\b)))
  (write (cons (intern '"hello") '(f "world")))

= ()f~"abc"f~(\a "b")f~(hello f "world")f


; Reading

- (define (string=? s t)
    (cond ((null? s) (null? t))
          ((eq? (car s) (car t)) (string=? (cdr s) (cdr t)))
          ('t 'f)))

  (define (memq? x xs)
    (cond ((null? xs) 'f)
          ((eq? x (car xs)) 't)
          ('t (memq? x (cdr xs)))))

  (define (cons! x xs-cell)
    (set-car! xs-cell (cons x (car xs-cell))))

  (define symbols '((f)))

  (define (symbol? x)
    (memq? x (car symbols)))

  (define (intern s) 
    (intern-lookup s (car symbols)))

  (define (intern-lookup s syms)
    (cond ((null? syms) (cons! s symbols) s)
          ((string=? s (car syms)) (car syms))
          ('t (intern-lookup s (cdr syms)))))

  (define (read)
    (skip-blanks (peek-char))
    (read-dispatch (read-char)))

  (define (skip-blanks c)
    (cond ((char-whitespace? c)
           (read-char)
           (skip-blanks (peek-char)))
          ('t)))

  (define (char-whitespace? c)
    (memq? c '" 
	"))

  (define non-symbol-chars (cons \" '"\(')"))

  (define sym-quote (intern '"quote"))

  (define (read-dispatch c)
    (cond ((eq? c eof-object) eof-object)
          ((eq? c \\) (read-char-literal (read-char)))
          ((eq? c \") (read-string (read-char)))
          ((eq? c \() (read-list))
          ((eq? c \') (cons sym-quote (cons (read) '())))
          ((eq? c \)) (error "Unbalanced parentheses"))
          ('t (intern (cons c (read-symbol (peek-char)))))))

  (define (read-char-literal c)
    (cond ((eq? c eof-object) (error '"EOF in character literal"))
          ('t c)))

  (define (read-string c)
    (cond ((eq? c eof-object) (error '"Unterminated string literal"))
          ((eq? c \") '())
          ('t (cons c (read-string (read-char))))))

  (define (read-symbol c)
    (cond ((char-whitespace? c) '())
          ((memq? c non-symbol-chars) '())
          ('t (read-char) (cons c (read-symbol (peek-char))))))

  (define (read-list)
    (skip-blanks (peek-char))
    (read-list-dispatch (read-char)))

  (define (read-list-dispatch c)
    (cond ((eq? c eof-object) (error '"Unterminated list"))
          ((eq? c \)) '())
          ('t (cons (read-dispatch c) (read-list)))))

  (read) hello
  (read) ('42 \x "yay" (() sym ()))

= "hello"~(("quote" "42") \x "yay" (() "sym" ()))


; Eval

- (define (string? x)
    (cond ((null? x) 't)
          ((char? x) 'f)
          ((char? (car x)) (string? (cdr x)))
          ('t 'f)))

  (define (string=? s t)
    (cond ((null? s) (null? t))
          ((eq? (car s) (car t)) (string=? (cdr s) (cdr t)))
          ('t 'f)))

  (define (memq? x xs)
    (cond ((null? xs) 'f)
          ((eq? x (car xs)) 't)
          ('t (memq? x (cdr xs)))))

  (define (cons! x xs-cell)
    (set-car! xs-cell (cons x (car xs-cell))))

  (define (list1 x) (cons x '()))

  (define symbols 
    '((t f eof-object define quote cond
	 eq? null? pair? char? cons car cdr
	 set-car! read-char peek-char write-char error)))

  (define (symbol? x)
    (memq? x (car symbols)))

  (define (intern s) 
    (intern-lookup s (car symbols)))

  (define (intern-lookup s syms)
    (cond ((null? syms) (cons! s symbols) s)
          ((string=? s (car syms)) (car syms))
          ('t (intern-lookup s (cdr syms)))))

  (define definitions '(()))
  (define global-vars (list1 (list1 'eof-object)))
  (define global-vals (list1 (list1 eof-object)))

  (define (eval-form form)
    (cond ((cond ((pair? form) (eq? (car form) 'define))
                 ('t 'f))
           (eval-define (cdr form)))
          ('t (eval form '() '()))))

  (define (eval-define defn)
    (cond ((symbol? (car defn))
           (define-global (car defn)
                          (eval (car (cdr defn)) '() '())))
          ('t (cons! defn definitions))))

  (define (define-global var val)
    (cons! var global-vars)
    (cons! val global-vals))

  (define (call rator args defs)
    (cond ((null? defs) (error '"Unknown rator"))
          ((eq? rator (car (car (car defs))))
           (evseq (cdr (car defs)) (cdr (car (car defs))) args))
          ('t (call rator args (cdr defs)))))

  (define (evseq es vars vals)
    (cond ((null? es) 'f)
          ((null? (cdr es)) (eval (car es) vars vals))
          ('t (eval (car es) vars vals)
              (evseq (cdr es) vars vals))))

  (define (eval e vars vals)
    (cond ((pair? e) 
           (cond ((symbol? e) (lookup e vars vals))
                 ('t (eval-pair (car e) (cdr e) vars vals))))
          ('t e)))

  (define (eval-pair rator rands vars vals)
    (cond ((eq? rator 'quote) (car rands))
          ((eq? rator 'cond) (evcond rands vars vals))
          ('t (apply rator (evlis rands vars vals)))))

  (define (evlis es vars vals)
    (cond ((null? es) '())
          ('t (cons (eval (car es) vars vals)
                    (evlis (cdr es) vars vals)))))

  (define (evcond clauses vars vals)
    (cond ((null? clauses) '"No matching cond clause yo")
          ((eval (car (car clauses)) vars vals)
           (evseq (cdr (car clauses)) vars vals))
          ('t (evcond (cdr clauses) vars vals))))

  (define (lookup var vars vals)
    (cond ((null? vars) (lookup1 var (car global-vars) (car global-vals)))
          ((eq? var (car vars)) (car vals))
          ('t (lookup var (cdr vars) (cdr vals)))))

  (define (lookup1 var vars vals)
    (cond ((null? vars) (error '"Unbound variable yo"))
          ((eq? var (car vars)) (car vals))
          ('t (lookup1 var (cdr vars) (cdr vals)))))

  (define (apply rator args)
    (cond ((eq? rator 'eq?)          (eq? (car args) (car (cdr args))))
	  ((eq? rator 'null?)        (null? (car args)))
	  ((eq? rator 'pair?)        (pair? (car args)))
	  ((eq? rator 'char?)        (char? (car args)))
	  ((eq? rator 'cons)         (cons (car args) (car (cdr args))))
	  ((eq? rator 'car)          (car (car args)))
	  ((eq? rator 'cdr)          (cdr (car args)))
	  ((eq? rator 'set-car!)     (set-car! (car args) (car (cdr args))))
	  ((eq? rator 'read-char)    (read-char))
	  ((eq? rator 'peek-char)    (peek-char))
	  ((eq? rator 'write-char)   (write-char (car args)))
          ((eq? rator 'error)        (error (car args)))
          ('t (call rator args (car definitions)))))

  (eval-form \a)
  (eval-form ''())
  (eval-form '(cond ('t 'yes)))
  (eval-form '(cond ('f 'yes) ('foo 'no)))
  (eval-form '(cond ((cond ('f 'one) ('f 'two) ('t 'three))
                     'hurray)
                    ('t 'booo)))
  (eval-form '(cond ((cond ('f 'one) ('f 'two) ('t 'f))
                     'hurray)
                    ('t 'booo)))
  (eval-form '(null? '()))
  (eval-form '(eq? (pair? '()) 'f))
  (intern 'x)
  (eval-form '(define (list x) (cons x '())))
  (eval-form '(list 'foo))
  (eval-form '(define pi '"3.14159"))
  (eval-form 'pi)
  (intern 'y)
  (eval-form '(define (append x y)
                (cond ((null? x) y)
                      ('t (cons (car x) (append (cdr x) y))))))
  (eval-form '(append '(a b c) '(x y z)))

* \a
* ()
* yes
* no
* hurray
* booo
* t
* t
* x
* f
* (foo)
* f
* "3.14159"
* y
* f
= (a b c x y z)
